---
description: 
globs: 
alwaysApply: false
---
# Docker 部署指南

## 概述
本项目使用 Docker 容器化部署，以提供一致的运行环境和简化部署流程。本指南提供了使用 Docker 部署本项目的最佳实践和规范。

## Docker 文件结构
项目的主要 Docker 配置文件位于 [yudao-server/Dockerfile](mdc:yudao-server/Dockerfile)，用于构建后端服务的 Docker 镜像。

## 镜像构建规范
1. **多阶段构建**: 使用多阶段构建优化镜像大小
2. **基础镜像选择**: 使用官方的 OpenJDK 镜像作为基础镜像
3. **版本固定**: 明确指定基础镜像版本，避免使用 `latest` 标签
4. **构建参数**: 使用 ARG 定义构建参数，提高灵活性
5. **构建缓存**: 合理安排构建步骤，利用 Docker 的缓存机制

```dockerfile
# 第一阶段：构建阶段
FROM maven:3.8-openjdk-17 AS builder

# 设置工作目录
WORKDIR /app

# 复制 pom.xml 文件
COPY pom.xml .
COPY yudao-dependencies/pom.xml ./yudao-dependencies/
COPY yudao-framework/pom.xml ./yudao-framework/
COPY yudao-module-system/pom.xml ./yudao-module-system/
COPY yudao-module-infra/pom.xml ./yudao-module-infra/
COPY yudao-module-erp/pom.xml ./yudao-module-erp/
COPY yudao-server/pom.xml ./yudao-server/

# 下载依赖（利用 Docker 缓存机制，避免每次构建都重新下载依赖）
RUN mvn dependency:go-offline -B

# 复制源代码
COPY . .

# 构建项目（跳过测试以加快构建速度）
RUN mvn package -DskipTests --no-transfer-progress

# 第二阶段：运行阶段
FROM openjdk:17-slim

# 设置工作目录
WORKDIR /app

# 复制构建产物
COPY --from=builder /app/yudao-server/target/*.jar app.jar

# 设置时区
ENV TZ=Asia/Shanghai

# 设置 JVM 参数
ENV JAVA_OPTS="-Xms512m -Xmx1024m -XX:+UseG1GC"

# 暴露端口
EXPOSE 4000

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s CMD curl -f http://localhost:4000/actuator/health || exit 1

# 使用非 root 用户运行应用，提高安全性
RUN addgroup --system --gid 1000 app && \
    adduser --system --uid 1000 --ingroup app app
USER app

# 启动命令
ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]
```

## 环境变量配置
1. **配置外部化**: 使用环境变量注入配置，避免硬编码
2. **敏感信息**: 敏感信息（如数据库密码）应通过环境变量或 Docker Secrets 传递
3. **默认值**: 为环境变量提供合理的默认值

```yaml
# application.yml 中的环境变量配置示例
spring:
  datasource:
    url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/${MYSQL_DATABASE:yudao}?useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&nullCatalogMeansCurrent=true
    username: ${MYSQL_USERNAME:root}
    password: ${MYSQL_PASSWORD:123456}
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    database: ${REDIS_DATABASE:0}
    password: ${REDIS_PASSWORD:}
```

## Docker Compose 配置
使用 Docker Compose 编排多个服务，简化开发和测试环境的部署。

```yaml
# docker-compose.yml
version: '3'

services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: yudao-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: yudao
    volumes:
      - mysql-data:/var/lib/mysql
      - ./sql/mysql/:/docker-entrypoint-initdb.d/
    ports:
      - "3306:3306"
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - yudao-network

  # Redis 缓存
  redis:
    image: redis:6.2
    container_name: yudao-redis
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - yudao-network

  # 后端服务
  yudao-server:
    build:
      context: .
      dockerfile: yudao-server/Dockerfile
    container_name: yudao-server
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: dev
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: yudao
      MYSQL_USERNAME: root
      MYSQL_PASSWORD: root
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "4000:4000"
    networks:
      - yudao-network

  # 前端服务
  yudao-ui:
    build:
      context: ./yudao-ui/yudao-ui-admin-vue3
      dockerfile: Dockerfile
    container_name: yudao-ui
    ports:
      - "80:80"
    depends_on:
      - yudao-server
    networks:
      - yudao-network

volumes:
  mysql-data:
  redis-data:

networks:
  yudao-network:
    driver: bridge
```

## 前端 Docker 配置
前端项目的 Docker 配置文件应位于 `yudao-ui/yudao-ui-admin-vue3/Dockerfile`，用于构建前端服务的 Docker 镜像。

```dockerfile
# 第一阶段：构建阶段
FROM node:16 AS builder

# 设置工作目录
WORKDIR /app

# 复制 package.json 和 pnpm-lock.yaml
COPY package.json pnpm-lock.yaml ./

# 安装 pnpm
RUN npm install -g pnpm

# 安装依赖
RUN pnpm install

# 复制源代码
COPY . .

# 构建项目
RUN pnpm build

# 第二阶段：运行阶段
FROM nginx:1.21-alpine

# 复制构建产物
COPY --from=builder /app/dist /usr/share/nginx/html

# 复制 Nginx 配置
COPY --from=builder /app/docker/nginx.conf /etc/nginx/conf.d/default.conf

# 暴露端口
EXPOSE 80

# 启动 Nginx
CMD ["nginx", "-g", "daemon off;"]
```

## 生产环境部署
1. **镜像标签**: 使用语义化版本号为镜像打标签，如 `yudao-server:1.0.0`
2. **资源限制**: 设置容器资源限制，避免单个容器消耗过多资源
3. **日志管理**: 配置日志收集和管理
4. **监控**: 集成监控工具，如 Prometheus 和 Grafana
5. **备份**: 定期备份数据和配置

```bash
# 构建镜像
docker build -t yudao-server:1.0.0 -f yudao-server/Dockerfile .

# 运行容器
docker run -d \
  --name yudao-server \
  -p 4000:4000 \
  -e SPRING_PROFILES_ACTIVE=prod \
  -e MYSQL_HOST=mysql-host \
  -e MYSQL_PORT=3306 \
  -e MYSQL_DATABASE=yudao \
  -e MYSQL_USERNAME=root \
  -e MYSQL_PASSWORD=secure-password \
  -e REDIS_HOST=redis-host \
  -e REDIS_PORT=6379 \
  --memory=1g \
  --cpus=1 \
  yudao-server:1.0.0
```

## CI/CD 集成
1. **自动构建**: 配置 CI 流水线自动构建 Docker 镜像
2. **自动测试**: 在 CI 流水线中运行自动化测试
3. **自动部署**: 配置 CD 流水线自动部署到目标环境

```yaml
# .github/workflows/docker-build.yml
name: Docker Build and Push

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      
      - name: Build with Maven
        run: mvn package -DskipTests
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: yourusername/yudao-server
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=ref,event=pr
      
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./yudao-server/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
```

## 最佳实践
1. **镜像精简**: 删除不必要的文件，减小镜像大小
2. **层数优化**: 减少 Dockerfile 中的层数，优化构建速度和镜像大小
3. **安全扫描**: 使用工具扫描镜像中的安全漏洞
4. **版本管理**: 为每个镜像打上明确的版本标签，避免使用 `latest`
5. **优雅关闭**: 确保容器能够优雅地处理 SIGTERM 信号
6. **健康检查**: 配置健康检查，及时发现并处理异常
7. **日志处理**: 将日志输出到标准输出流，便于收集和管理
